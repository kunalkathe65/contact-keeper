const express = require('express');
const router = express.Router();
const config = require('config');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { check, validationResult } = require('express-validator');




// @route     POST  api/user
// @desc      Register a user
// @access    Public
router.post('/',[
    //validating using express-validator that name is not empty
    check('name','Please enter name!').not().isEmpty(),  
    //if email is in the proper format  
    check('email','Please enter email!').isEmail(),       
    //password is not blank and is minimum 8 chars in length
    check('password','Please enter password with 8 or more characters!').isLength({min:8})  
],
async (req,res) => {

    //collecting all the errors occurred in validation
    const errors = validationResult(req);  
    if(!errors.isEmpty()){                 //if there are errors     
        return res.status(400).json({errors:errors.array()});
    }
    //else destructuring the request body content
    const {name,email,password} = req.body;
    
    try{

        let user = await User.findOne({email});   //searching user based on email
        if(user){                                 
            return res.status(400).json({msg:"User already exists!!"});
        }

        user = new User({  //else creating a new instance od "User" model
            name,
            email,
            password
        });

        //generating SALT(like a secret code or key) using bcryptjs
        const salt = await bcrypt.genSalt(10);   

        //hashing and encrypting password before it is being saved in database          
        user.password = await bcrypt.hash(password,salt);  

        await user.save();
        
        //creating a payload which is just a piece of info about user here its ID(virtual) generated by mongoose
        const payload = {   
            user: user.id
        }

        const secret = config.get('jwtSecret');

        //signing JWT with payload, secret(anything in String), options(like token expire time in ms etc...) and callback
        jwt.sign(payload,secret,{
            expiresIn:3600000
        },(err,token) => {
            if(err) throw err;
            else{
                res.json({ token })
            }
        })
    }catch(err){
        console.log(err.message);
        res.status(500).send('server error!!');
    }

});

module.exports = router;